# Configuration file
# key = value

# Configuration file
# key = value

# Logging
%dev.quarkus.log.console.level=INFO
%dev.quarkus.log.category."com.redhat.quarkus.cafe".level=DEBUG

%test.quarkus.log.console.level=INFO
%test.quarkus.log.category."com.redhat.quarkus.cafe".level=DEBUG
%test.quarkus.log.category."org.flywaydb".level=ERROR
%test.quarkus.log.category."org.apache.kafka".level=ERROR

# Datasource
%dev.quarkus.datasource.url = jdbc:postgresql://localhost:5432/coffeeshop-dev?currentSchema=dev
%dev.quarkus.datasource.driver = org.postgresql.Driver
%dev.quarkus.datasource.username = quarkusdev
%dev.quarkus.datasource.password = redhat-19
%dev.quarkus.hibernate-orm.log.sql=true

%test.quarkus.datasource.url = jdbc:h2:./target/test-db/test;INIT=CREATE SCHEMA IF NOT EXISTS TEST\\;SET SCHEMA TEST
%test.quarkus.datasource.driver = org.h2.Driver
#%test.quarkus.datasource.username = username-default
#%test.quarkus.datasource.password = redhat-19
%test.quarkus.hibernate-orm.log.sql=true;

#quarkus.datasource.url = jdbc:postgresql://localhost:5432/coffeeshop-prod?currentSchema=prod
#quarkus.datasource.driver = org.postgresql.Driver
#quarkus.datasource.username = quarkusdev
#quarkus.datasource.password = redhat-19
#quarkus.hibernate-orm.log.sql=true

## Hibernate
# drop and create the database at startup (use `update` to only update the schema)
#%dev.quarkus.hibernate-orm.database.generation = drop-and-create

## Flyway

## Flyway minimal config properties
#%test.quarkus.flyway.migrate-at-start=false

## Flyway optional config properties
#%test.quarkus.flyway.baseline-on-migrate=true
#%test.quarkus.flyway.baseline-version=0.0.0
#%test.quarkus.flyway.baseline-description=Initial version
#%test.quarkus.flyway.connect-retries=10
#%test.quarkus.flyway.schemas=TEST
#%test.quarkus.flyway.table=flyway_quarkus_history
#%test.quarkus.flyway.locations=db/migration
#%test.quarkus.flyway.sql-migration-prefix=V
#%test.quarkus.flyway.repeatable-sql-migration-prefix=R

# Kafka/Reactive Messaging

## Barista

### Incoming

#### Dev
#%dev.mp.messaging.incoming.orders-in.connector=smallrye-kafka
#%dev.mp.messaging.incoming.orders-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
#%dev.mp.messaging.incoming.orders-in.topic=orders
#%dev.mp.messaging.incoming.orders-in.bootstrap.servers=localhost:9092
# %dev.mp.messaging.incoming.orders-in.group.id=core-group

#### Test
#%test.mp.messaging.incoming.orders-in.connector=smallrye-kafka
#%test.mp.messaging.incoming.orders-in.topic=orders-test
#%test.mp.messaging.incoming.orders-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
#%test.mp.messaging.incoming.orders-in.bootstrap.servers=localhost:9092

#### Prod
#mp.messaging.incoming.orders-in.connector=smallrye-kafka
#mp.messaging.incoming.orders-in.bootstrap.servers=cafe-cluster-kafka-bootstrap:9092
#mp.messaging.incoming.orders-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
#mp.messaging.incoming.orders-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
#mp.messaging.incoming.orders-in.topic=orders-topic
#mp.messaging.incoming.orders-in.group.id=core-group

### Outgoing

### Dev
%dev.mp.messaging.outgoing.ordersout.connector=smallrye-kafka
%dev.mp.messaging.outgoing.ordersout.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%dev.mp.messaging.outgoing.ordersout.value.serializer=org.apache.kafka.common.serialization.StringSerializer
%dev.mp.messaging.outgoing.ordersout.topic=orders
%dev.mp.messaging.outgoing.ordersout.bootstrap.servers=localhost:9092

### Test
%test.mp.messaging.outgoing.ordersout.connector=smallrye-kafka
%test.mp.messaging.outgoing.ordersout.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%test.mp.messaging.outgoing.ordersout.value.serializer=org.apache.kafka.common.serialization.StringSerializer
%test.mp.messaging.outgoing.ordersout.topic=orders-test
%test.mp.messaging.outgoing.ordersout.bootstrap.servers=localhost:9092

### Prod
mp.messaging.outgoing.ordersout.group.id=core-group
mp.messaging.outgoing.orders-out.bootstrap.servers=cafe-cluster-kafka-bootstrap:9092
mp.messaging.outgoing.orders-out.connector=smallrye-kafka
mp.messaging.outgoing.orders-out.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.orders-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.orders-out.topic=orders-topic

# REST CLIENT
%dev.com.redhat.quarkus.cafe.infrastructure.DashboardService/mp-rest/url=http://localhost:8083
%dev.com.redhat.quarkus.cafe.infrastructure.DashboardService/mp-rest/scope=javax.inject.Singleton

%dev.com.redhat.quarkus.cafe.infrastructure.DashboardService/mp-rest/url=http://localhost:8083
%dev.com.redhat.quarkus.cafe.infrastructure.DashboardService/mp-rest/scope=javax.inject.Singleton

com.redhat.quarkus.cafe.infrastructure.DashboardService/mp-rest/url=http://web-cafe.apps.ocp4.home.ocpcloud.com
com.redhat.quarkus.cafe.infrastructure.DashboardService/mp-rest/scope=javax.inject.Singleton
